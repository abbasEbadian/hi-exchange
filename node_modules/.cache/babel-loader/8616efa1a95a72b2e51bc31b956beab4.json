{"ast":null,"code":"var _jsxFileName = \"H:\\\\Projects\\\\package\\\\cheerio\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport rootReducer from './redux/reducers';\nimport { sessionService } from 'redux-react-session';\nimport axios from 'axios';\nimport createAuthRefreshInterceptor from 'axios-auth-refresh';\nconst mid = [thunk];\nconst store = createStore(rootReducer, compose(applyMiddleware(...mid), window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()));\n\nconst validateSession = session => {\n  return new Promise((res, rej) => {\n    const refresh_time = +Object.keys(session).includes(\"refresh_time\") && session.refresh_time;\n    if (!refresh_time) rej(\"time session not found\");\n    if (new Date().getTime() - refresh_time > 60 * 60 * 1000) rej(\"session Expired\");\n    res(true);\n  });\n};\n\nconst options = {\n  refreshOnCheckAuth: false,\n  redirectPath: '/opt-1',\n  validateSession\n};\nsessionService.initSessionService(store, options);\nReactDOM.render( /*#__PURE__*/React.createElement(Provider, {\n  store: store,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }\n})), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["H:/Projects/package/cheerio/src/index.js"],"names":["React","ReactDOM","App","serviceWorker","Provider","thunk","createStore","applyMiddleware","compose","rootReducer","sessionService","axios","createAuthRefreshInterceptor","mid","store","window","__REDUX_DEVTOOLS_EXTENSION__","validateSession","session","Promise","res","rej","refresh_time","Object","keys","includes","Date","getTime","options","refreshOnCheckAuth","redirectPath","initSessionService","render","document","getElementById","unregister"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,WAAT,EAAuBC,eAAvB,EAAwCC,OAAxC,QAAuD,OAAvD;AACA,OAAOC,WAAP,MAAwB,kBAAxB;AACA,SAAQC,cAAR,QAA6B,qBAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,4BAAP,MAAyC,oBAAzC;AAKA,MAAMC,GAAG,GAAG,CAACR,KAAD,CAAZ;AACA,MAAMS,KAAK,GAAGR,WAAW,CAACG,WAAD,EACrBD,OAAO,CACPD,eAAe,CAAC,GAAGM,GAAJ,CADR,EAEPE,MAAM,CAACC,4BAAP,IAAuCD,MAAM,CAACC,4BAAP,EAFhC,CADc,CAAzB;;AAMA,MAAMC,eAAe,GAAIC,OAAD,IAAa;AACjC,SAAO,IAAIC,OAAJ,CAAY,CAACC,GAAD,EAAMC,GAAN,KAAY;AAC3B,UAAMC,YAAY,GAAG,CAACC,MAAM,CAACC,IAAP,CAAYN,OAAZ,EAAqBO,QAArB,CAA8B,cAA9B,CAAD,IAAkDP,OAAO,CAACI,YAA/E;AACA,QAAG,CAACA,YAAJ,EAAkBD,GAAG,CAAC,wBAAD,CAAH;AAClB,QAAG,IAAIK,IAAJ,GAAWC,OAAX,KAAuBL,YAAvB,GAAoC,KAAG,EAAH,GAAM,IAA7C,EAAmDD,GAAG,CAAC,iBAAD,CAAH;AACnDD,IAAAA,GAAG,CAAC,IAAD,CAAH;AACH,GALM,CAAP;AAMH,CAPD;;AAQA,MAAMQ,OAAO,GAAG;AAAEC,EAAAA,kBAAkB,EAAE,KAAtB;AAA6BC,EAAAA,YAAY,EAAE,QAA3C;AAAqDb,EAAAA;AAArD,CAAhB;AACAP,cAAc,CAACqB,kBAAf,CAAkCjB,KAAlC,EAAyCc,OAAzC;AAIA3B,QAAQ,CAAC+B,MAAT,eACI,oBAAC,QAAD;AAAU,EAAA,KAAK,EAAElB,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ,CADJ,EAKEmB,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CALF,E,CAOA;AACA;AACA;;AACA/B,aAAa,CAACgC,UAAd","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux'\r\nimport thunk from 'redux-thunk'\r\nimport { createStore,  applyMiddleware, compose } from 'redux'\r\nimport rootReducer from './redux/reducers'\r\nimport {sessionService} from 'redux-react-session'\r\nimport axios from 'axios';\r\nimport createAuthRefreshInterceptor from 'axios-auth-refresh';\r\n\r\n\r\n\r\n\r\nconst mid = [thunk]\r\nconst store = createStore(rootReducer,\r\n    compose(\r\n    applyMiddleware(...mid),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\r\n    );\r\n\r\nconst validateSession = (session) => { \r\n    return new Promise((res, rej)=>{\r\n        const refresh_time = +Object.keys(session).includes(\"refresh_time\") && session.refresh_time;\r\n        if(!refresh_time) rej(\"time session not found\");\r\n        if(new Date().getTime() - refresh_time>60*60*1000) rej(\"session Expired\");\r\n        res(true);\r\n    });\r\n}\r\nconst options = { refreshOnCheckAuth: false, redirectPath: '/opt-1', validateSession };\r\nsessionService.initSessionService(store, options)\r\n \r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>\r\n\r\n, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"]},"metadata":{},"sourceType":"module"}