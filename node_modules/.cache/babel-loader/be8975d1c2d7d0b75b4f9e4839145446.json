{"ast":null,"code":"var _jsxFileName = \"H:\\\\Projects\\\\package\\\\cheerio\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport rootReducer from './redux/reducers';\nimport { sessionService } from 'redux-react-session';\nimport createAuthRefreshInterceptor from 'axios-auth-refresh';\nimport axios from 'axios';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"; // init redux store\n\nconst mid = [thunk];\nconst store = createStore(rootReducer, compose(applyMiddleware(...mid), window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())); // validate session\n// const validateSession = (session) => { \n//     return new Promise((res, rej)=>{\n//         if (!session) return rej(false)\n//         const refresh_time = +Object.keys(session).includes(\"refresh_time\") && session.refresh_time;\n//         if(!refresh_time) return  rej(\"time session not found\");\n//         if(new Date().getTime() - refresh_time>60*60*1000) rej(\"session Expired\");\n//         return res(true);\n//     });\n// }\n\nconst options = {\n  refreshOnCheckAuth: true,\n  redirectPath: '/opt-1'\n};\nsessionService.initSessionService(store, options);\naxios.interceptors.response.use(response => {\n  return response;\n}, async function (error) {\n  const originalRequest = error.config;\n\n  if ((error.response.status === 401 || error.response.status === 403) && !originalRequest._retry) {\n    sessionService.loadSession().then(session => {\n      axios.post(\"https://hi-exchange.com/api/v2/token/refresh/\", {\n        refresh: session.refresh\n      }).then(data => {\n        sessionService.saveSession({\n          token: data.data.access,\n          refresh: session.refresh,\n          refresh_time: new Date().getTime()\n        }).then(e => {\n          // failedRequest.response.config.headers['Authorization'] = 'Bearer ' + data.data.access;\n          originalRequest._retry = true;\n          axios.defaults.headers.common['Authorization'] = 'Bearer ' + data.data.access;\n          return axios(originalRequest);\n        }).catch(e => {\n          return Promise.reject(error);\n        });\n        return Promise.reject(error);\n      }).catch(err => {\n        console.log(err);\n      });\n    });\n  }\n});\n\nconst refreshAuthLogic = failedRequest => sessionService.loadSession().then(session => {\n  axios.post(\"https://hi-exchange.com/api/v2/token/refresh/\", {\n    refresh: session.refresh\n  }).then(data => {\n    sessionService.saveSession({\n      token: data.data.access,\n      refresh: session.refresh,\n      refresh_time: new Date().getTime()\n    }).then(e => {\n      failedRequest.response.config.headers['Authorization'] = 'Bearer ' + data.data.access;\n      return Promise.resolve();\n    }).catch(e => {\n      return Promise.reject();\n    });\n    return Promise.reject();\n  }).catch(err => {\n    console.log(err);\n  });\n}).catch(err => {\n  console.log(err);\n}); // bind axios to auth refresher\n// createAuthRefreshInterceptor(axios, refreshAuthLogic)\n\n\nReactDOM.render( /*#__PURE__*/React.createElement(Provider, {\n  store: store,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 9\n  }\n})), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["H:/Projects/package/cheerio/src/index.js"],"names":["React","ReactDOM","App","serviceWorker","Provider","thunk","createStore","applyMiddleware","compose","rootReducer","sessionService","createAuthRefreshInterceptor","axios","mid","store","window","__REDUX_DEVTOOLS_EXTENSION__","options","refreshOnCheckAuth","redirectPath","initSessionService","interceptors","response","use","error","originalRequest","config","status","_retry","loadSession","then","session","post","refresh","data","saveSession","token","access","refresh_time","Date","getTime","e","defaults","headers","common","catch","Promise","reject","err","console","log","refreshAuthLogic","failedRequest","resolve","render","document","getElementById","unregister"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux'\r\nimport thunk from 'redux-thunk'\r\nimport { createStore,  applyMiddleware, compose } from 'redux'\r\nimport rootReducer from './redux/reducers'\r\nimport {sessionService} from 'redux-react-session'\r\nimport createAuthRefreshInterceptor from 'axios-auth-refresh';\r\nimport axios from 'axios';\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\n\r\n\r\n\r\n// init redux store\r\nconst mid = [thunk]\r\nconst store = createStore(rootReducer,\r\n    compose(\r\n    applyMiddleware(...mid),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\r\n    );\r\n\r\n\r\n// validate session\r\n// const validateSession = (session) => { \r\n//     return new Promise((res, rej)=>{\r\n//         if (!session) return rej(false)\r\n//         const refresh_time = +Object.keys(session).includes(\"refresh_time\") && session.refresh_time;\r\n//         if(!refresh_time) return  rej(\"time session not found\");\r\n//         if(new Date().getTime() - refresh_time>60*60*1000) rej(\"session Expired\");\r\n//         return res(true);\r\n//     });\r\n// }\r\nconst options = { refreshOnCheckAuth: true, redirectPath: '/opt-1' };\r\nsessionService.initSessionService(store, options)\r\n \r\n\r\n\r\naxios.interceptors.response.use((response) => {\r\n    return response\r\n  }, async function (error) {\r\n    const originalRequest = error.config;\r\n    if ((error.response.status === 401 || error.response.status === 403) && !originalRequest._retry) {\r\n        sessionService.loadSession().then(session=>{\r\n            axios.post(\"https://hi-exchange.com/api/v2/token/refresh/\", {\r\n                refresh: session.refresh\r\n            }).then(data=>{\r\n                sessionService.saveSession({\r\n                    token: data.data.access,\r\n                    refresh: session.refresh,\r\n                    refresh_time: new Date().getTime()\r\n                }).then(e=>{\r\n                    // failedRequest.response.config.headers['Authorization'] = 'Bearer ' + data.data.access;\r\n                    originalRequest._retry = true;\r\n                    axios.defaults.headers.common['Authorization'] = 'Bearer ' + data.data.access;\r\n                    return axios(originalRequest);\r\n                }).catch(e=>{\r\n                    return Promise.reject(error);\r\n                })\r\n                return Promise.reject(error);\r\n            }).catch(err=>{\r\n                console.log(err);\r\n                \r\n            })\r\n   \r\n        });\r\n    }\r\n})\r\n\r\nconst refreshAuthLogic = failedRequest => \r\nsessionService.loadSession().then(session=>{\r\n    axios.post(\"https://hi-exchange.com/api/v2/token/refresh/\", {\r\n        refresh: session.refresh\r\n    }).then(data=>{\r\n        sessionService.saveSession({\r\n            token: data.data.access,\r\n            refresh: session.refresh,\r\n            refresh_time: new Date().getTime()\r\n        }).then(e=>{\r\n            failedRequest.response.config.headers['Authorization'] = 'Bearer ' + data.data.access;\r\n            \r\n            return Promise.resolve()\r\n        }).catch(e=>{\r\n            return Promise.reject()\r\n        })\r\n        return Promise.reject()\r\n    }).catch(err=>{\r\n        console.log(err);\r\n        \r\n    })\r\n\r\n}).catch(err=>{console.log(err);\r\n})\r\n\r\n// bind axios to auth refresher\r\n// createAuthRefreshInterceptor(axios, refreshAuthLogic)\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>\r\n\r\n, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"]},"metadata":{},"sourceType":"module"}