{"ast":null,"code":"'use strict';\n\nconst fetch = require('node-fetch');\n\nconst qs = require('qs');\n\nconst BASE_URL = 'https://pro-api.coinmarketcap.com';\n\nclass CoinMarketCap {\n  /**\n   *\n   * @param {String} apiKey API key for accessing the CoinMarketCap API\n   * @param {Object=} Options Options for the CoinMarketCap instance\n   * @param {String=} options.version  Version of API. Defaults to 'v2'\n   * @param {Function=} options.fetcher fetch function to use. Defaults to node-fetch\n   * @param {Object=} options.config = Configuration for fetch request\n   *\n   */\n  constructor(apiKey, {\n    version = 'v1',\n    fetcher = fetch,\n    config = {}\n  } = {}) {\n    this.apiKey = apiKey;\n    this.config = Object.assign({}, {\n      method: 'GET',\n      headers: {\n        'X-CMC_PRO_API_KEY': this.apiKey,\n        Accept: 'application/json',\n        'Accept-Charset': 'utf-8',\n        'Accept-Encoding': 'deflate, gzip'\n      }\n    }, config);\n    this.fetcher = fetcher;\n    this.url = `${BASE_URL}/${version}`;\n  }\n  /**\n   * Get a paginated list of all cryptocurrencies by CoinMarketCap ID.\n   *\n   * @param {Object=} options Options for the request:\n   * @param {String=} [options.listingStatus=\"active\"] active or inactive coins\n   * @param {Number|String=} [options.start=1] Return results from rank start and above\n   * @param {Number|String=} options.limit Only returns limit number of results\n   * @param {String[]|String=} options.symbol Comma separated list of symbols, will ignore the other options\n   * @param {String=} [options.sort=\"id\"] Sort results by the options at https://coinmarketcap.com/api/documentation/v1/#operation/getV1CryptocurrencyMap\n   *\n   * @example\n   * const client = new CoinMarketCap('api key')\n   * client.getIdMap().then(console.log).catch(console.error)\n   * client.getIdMap({listingStatus: 'inactive', limit: 10}).then(console.log).catch(console.error)\n   * client.getIdMap({symbol: 'BTC,ETH'}).then(console.log).catch(console.error)\n   * client.getIdMap({symbol: ['BTC', 'ETH']}).then(console.log).catch(console.error)\n   * client.getIdMap({sort: 'cmc_rank'}).then(console.log).catch(console.error)\n   */\n\n\n  getIdMap(args = {}) {\n    let {\n      listingStatus,\n      start,\n      limit,\n      symbol,\n      sort\n    } = args;\n\n    if (symbol instanceof Array) {\n      symbol = symbol.join(',');\n    }\n\n    return createRequest({\n      fetcher: this.fetcher,\n      url: `${this.url}/cryptocurrency/map`,\n      config: this.config,\n      query: {\n        listing_status: listingStatus,\n        start,\n        limit,\n        symbol,\n        sort\n      }\n    });\n  }\n  /**\n   * Get static metadata for one or more cryptocurrencies.\n   * Either id or symbol is required, but passing in both is not allowed.\n   *\n   * @param {Object=} options Options for the request:\n   * @param {Array|String|Number=} options.id One or more comma separated cryptocurrency IDs\n   * @param {String[]|String} options.symbol One or more comma separated cryptocurrency symbols\n   *\n   * @example\n   * const client = new CoinMarketCap('api key')\n   * client.getMetadata({id: '1'}).then(console.log).catch(console.error)\n   * client.getMetadata({id: [1, 2]}).then(console.log).catch(console.error)\n   * client.getMetadata({symbol: 'BTC,ETH'}).then(console.log).catch(console.error)\n   * client.getMetadata({symbol: ['BTC', 'ETH']}).then(console.log).catch(console.error)\n   */\n\n\n  getMetadata(args = {}) {\n    return createRequest({\n      fetcher: this.fetcher,\n      url: `${this.url}/cryptocurrency/info`,\n      config: this.config,\n      query: sanitizeIdAndSymbol(args.id, args.symbol)\n    });\n  }\n  /**\n   * Get information on all tickers.\n   * Start and limit options can only be used when currency or ID is not given.\n   * Currency and ID cannot be passed in at the same time.\n   *\n   * @param {Object=} options Options for the request\n   * @param {Number|String=} [options.start=1] Return results from rank start and above\n   * @param {Number|String=} [options.limit=100] Only returns limit number of results [1..5000]\n   * @param {String[]|String=} [options.convert=\"USD\"] Return info in terms of another currency\n   * @param {String=} [options.sort=\"market_cap\"] Sort results by the options at https://pro.coinmarketcap.com/api/v1#operation/getV1CryptocurrencyListingsLatest\n   * @param {String=} options.sortDir Direction in which to order cryptocurrencies (\"asc\" | \"desc\")\n   * @param {String=} [options.cryptocurrencyType=\"all\"] Type of cryptocurrency to include (\"all\" | \"coins\" | \"tokens\")\n   *\n   * @example\n   * const client = new CoinMarketCap('api key')\n   * client.getTickers({limit: 3}).then(console.log).catch(console.error)\n   * client.getTickers({convert: 'EUR'}).then(console.log).catch(console.error)\n   * client.getTickers({start: 0, limit: 5}).then(console.log).catch(console.error)\n   * client.getTickers({sort: 'name'}).then(console.log).catch(console.error)\n   */\n\n\n  getTickers(args = {}) {\n    let {\n      start,\n      limit,\n      convert,\n      sort,\n      sortDir,\n      cryptocurrencyType\n    } = args; // eslint-disable-next-line\n\n    if (start && limit == 0) {\n      throw new Error('Start and limit = 0 cannot be passed in at the same time.');\n    } // eslint-disable-next-line\n\n\n    if (limit == 0) {\n      limit = 5000;\n    }\n\n    if (convert && convert instanceof Array) {\n      convert = convert.join(',');\n    }\n\n    return createRequest({\n      fetcher: this.fetcher,\n      url: `${this.url}/cryptocurrency/listings/latest`,\n      config: this.config,\n      query: {\n        start,\n        limit,\n        convert,\n        sort,\n        sort_dir: sortDir,\n        cryptocurrency_type: cryptocurrencyType\n      }\n    });\n  }\n  /**\n   * Get latest market quote for 1 or more cryptocurrencies.\n   *\n   * @param {Object=} options Options for the request:\n   * @param {Array|String|Number=} options.id One or more comma separated cryptocurrency IDs\n   * @param {String[]|String=} options.symbol One or more comma separated cryptocurrency symbols\n   * @param {String[]|String=} [options.convert=\"USD\"] Return quotes in terms of another currency\n   *\n   * @example\n   * const client = new CoinMarketCap('api key')\n   * client.getQuotes({id: '1'}).then(console.log).catch(console.error)\n   * client.getQuotes({id: [1, 2], convert: 'USD,EUR'}).then(console.log).catch(console.error)\n   * client.getQuotes({symbol: 'BTC,ETH'}).then(console.log).catch(console.error)\n   * client.getQuotes({symbol: ['BTC', 'ETH']}).then(console.log).catch(console.error)\n   */\n\n\n  getQuotes(args = {}) {\n    let convert = args.convert;\n    const {\n      id,\n      symbol\n    } = sanitizeIdAndSymbol(args.id, args.symbol);\n\n    if (convert instanceof Array) {\n      convert = convert.join(',');\n    }\n\n    return createRequest({\n      fetcher: this.fetcher,\n      url: `${this.url}/cryptocurrency/quotes/latest`,\n      config: this.config,\n      query: {\n        id,\n        symbol,\n        convert\n      }\n    });\n  }\n  /**\n   * Get global information\n   *\n   * @param {Object|String[]|String=} options Options for the request:\n   * @param {String[]|String=} [options.convert=\"USD\"] Return quotes in terms of another currency\n   *\n   * @example\n   * const client = new CoinMarketCap()\n   * client.getGlobal('GBP').then(console.log).catch(console.error)\n   * client.getGlobal({convert: 'GBP'}).then(console.log).catch(console.error)\n   */\n\n\n  getGlobal(convert) {\n    if (typeof convert === 'string') {\n      convert = {\n        convert: convert.toUpperCase()\n      };\n    }\n\n    if (convert instanceof Array) {\n      convert = {\n        convert: convert.map(currency => currency.toUpperCase())\n      };\n    }\n\n    if (convert && convert.convert instanceof Array) {\n      convert.convert = convert.convert.join(',');\n    }\n\n    return createRequest({\n      fetcher: this.fetcher,\n      url: `${this.url}/global-metrics/quotes/latest`,\n      config: this.config,\n      query: convert\n    });\n  }\n\n}\n\nconst sanitizeIdAndSymbol = (id, symbol) => {\n  if (id && symbol) {\n    throw new Error('ID and symbol cannot be passed in at the same time.');\n  }\n\n  if (!id && !symbol) {\n    throw new Error('Either ID or symbol is required to be passed in.');\n  }\n\n  if (id instanceof Array) {\n    id = id.join(',');\n  }\n\n  if (symbol instanceof Array) {\n    symbol = symbol.join(',');\n  }\n\n  return {\n    id,\n    symbol\n  };\n};\n\nconst createRequest = (args = {}) => {\n  const {\n    url,\n    config,\n    query,\n    fetcher\n  } = args;\n  return fetcher(`${url}${query ? `?${qs.stringify(query)}` : ''}`, config).then(res => res.json());\n};\n\nmodule.exports = CoinMarketCap;","map":{"version":3,"sources":["H:/Projects/package/cheerio/node_modules/coinmarketcap-api/index.js"],"names":["fetch","require","qs","BASE_URL","CoinMarketCap","constructor","apiKey","version","fetcher","config","Object","assign","method","headers","Accept","url","getIdMap","args","listingStatus","start","limit","symbol","sort","Array","join","createRequest","query","listing_status","getMetadata","sanitizeIdAndSymbol","id","getTickers","convert","sortDir","cryptocurrencyType","Error","sort_dir","cryptocurrency_type","getQuotes","getGlobal","toUpperCase","map","currency","stringify","then","res","json","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst fetch = require('node-fetch')\nconst qs = require('qs')\n\nconst BASE_URL = 'https://pro-api.coinmarketcap.com'\n\nclass CoinMarketCap {\n  /**\n   *\n   * @param {String} apiKey API key for accessing the CoinMarketCap API\n   * @param {Object=} Options Options for the CoinMarketCap instance\n   * @param {String=} options.version  Version of API. Defaults to 'v2'\n   * @param {Function=} options.fetcher fetch function to use. Defaults to node-fetch\n   * @param {Object=} options.config = Configuration for fetch request\n   *\n   */\n  constructor (apiKey, { version = 'v1', fetcher = fetch, config = {} } = {}) {\n    this.apiKey = apiKey\n    this.config = Object.assign({}, {\n      method: 'GET',\n      headers: {\n        'X-CMC_PRO_API_KEY': this.apiKey,\n        Accept: 'application/json',\n        'Accept-Charset': 'utf-8',\n        'Accept-Encoding': 'deflate, gzip'\n      }\n    }, config)\n\n    this.fetcher = fetcher\n    this.url = `${BASE_URL}/${version}`\n  }\n\n  /**\n   * Get a paginated list of all cryptocurrencies by CoinMarketCap ID.\n   *\n   * @param {Object=} options Options for the request:\n   * @param {String=} [options.listingStatus=\"active\"] active or inactive coins\n   * @param {Number|String=} [options.start=1] Return results from rank start and above\n   * @param {Number|String=} options.limit Only returns limit number of results\n   * @param {String[]|String=} options.symbol Comma separated list of symbols, will ignore the other options\n   * @param {String=} [options.sort=\"id\"] Sort results by the options at https://coinmarketcap.com/api/documentation/v1/#operation/getV1CryptocurrencyMap\n   *\n   * @example\n   * const client = new CoinMarketCap('api key')\n   * client.getIdMap().then(console.log).catch(console.error)\n   * client.getIdMap({listingStatus: 'inactive', limit: 10}).then(console.log).catch(console.error)\n   * client.getIdMap({symbol: 'BTC,ETH'}).then(console.log).catch(console.error)\n   * client.getIdMap({symbol: ['BTC', 'ETH']}).then(console.log).catch(console.error)\n   * client.getIdMap({sort: 'cmc_rank'}).then(console.log).catch(console.error)\n   */\n  getIdMap (args = {}) {\n    let { listingStatus, start, limit, symbol, sort } = args\n\n    if (symbol instanceof Array) {\n      symbol = symbol.join(',')\n    }\n\n    return createRequest({\n      fetcher: this.fetcher,\n      url: `${this.url}/cryptocurrency/map`,\n      config: this.config,\n      query: { listing_status: listingStatus, start, limit, symbol, sort }\n    })\n  }\n\n  /**\n   * Get static metadata for one or more cryptocurrencies.\n   * Either id or symbol is required, but passing in both is not allowed.\n   *\n   * @param {Object=} options Options for the request:\n   * @param {Array|String|Number=} options.id One or more comma separated cryptocurrency IDs\n   * @param {String[]|String} options.symbol One or more comma separated cryptocurrency symbols\n   *\n   * @example\n   * const client = new CoinMarketCap('api key')\n   * client.getMetadata({id: '1'}).then(console.log).catch(console.error)\n   * client.getMetadata({id: [1, 2]}).then(console.log).catch(console.error)\n   * client.getMetadata({symbol: 'BTC,ETH'}).then(console.log).catch(console.error)\n   * client.getMetadata({symbol: ['BTC', 'ETH']}).then(console.log).catch(console.error)\n   */\n  getMetadata (args = {}) {\n    return createRequest({\n      fetcher: this.fetcher,\n      url: `${this.url}/cryptocurrency/info`,\n      config: this.config,\n      query: sanitizeIdAndSymbol(args.id, args.symbol)\n    })\n  }\n\n  /**\n   * Get information on all tickers.\n   * Start and limit options can only be used when currency or ID is not given.\n   * Currency and ID cannot be passed in at the same time.\n   *\n   * @param {Object=} options Options for the request\n   * @param {Number|String=} [options.start=1] Return results from rank start and above\n   * @param {Number|String=} [options.limit=100] Only returns limit number of results [1..5000]\n   * @param {String[]|String=} [options.convert=\"USD\"] Return info in terms of another currency\n   * @param {String=} [options.sort=\"market_cap\"] Sort results by the options at https://pro.coinmarketcap.com/api/v1#operation/getV1CryptocurrencyListingsLatest\n   * @param {String=} options.sortDir Direction in which to order cryptocurrencies (\"asc\" | \"desc\")\n   * @param {String=} [options.cryptocurrencyType=\"all\"] Type of cryptocurrency to include (\"all\" | \"coins\" | \"tokens\")\n   *\n   * @example\n   * const client = new CoinMarketCap('api key')\n   * client.getTickers({limit: 3}).then(console.log).catch(console.error)\n   * client.getTickers({convert: 'EUR'}).then(console.log).catch(console.error)\n   * client.getTickers({start: 0, limit: 5}).then(console.log).catch(console.error)\n   * client.getTickers({sort: 'name'}).then(console.log).catch(console.error)\n   */\n  getTickers (args = {}) {\n    let { start, limit, convert, sort, sortDir, cryptocurrencyType } = args\n\n    // eslint-disable-next-line\n    if (start && (limit == 0)) {\n      throw new Error('Start and limit = 0 cannot be passed in at the same time.')\n    }\n\n    // eslint-disable-next-line\n    if (limit == 0) {\n      limit = 5000\n    }\n\n    if (convert && convert instanceof Array) {\n      convert = convert.join(',')\n    }\n\n    return createRequest({\n      fetcher: this.fetcher,\n      url: `${this.url}/cryptocurrency/listings/latest`,\n      config: this.config,\n      query: { start, limit, convert, sort, sort_dir: sortDir, cryptocurrency_type: cryptocurrencyType }\n    })\n  }\n\n  /**\n   * Get latest market quote for 1 or more cryptocurrencies.\n   *\n   * @param {Object=} options Options for the request:\n   * @param {Array|String|Number=} options.id One or more comma separated cryptocurrency IDs\n   * @param {String[]|String=} options.symbol One or more comma separated cryptocurrency symbols\n   * @param {String[]|String=} [options.convert=\"USD\"] Return quotes in terms of another currency\n   *\n   * @example\n   * const client = new CoinMarketCap('api key')\n   * client.getQuotes({id: '1'}).then(console.log).catch(console.error)\n   * client.getQuotes({id: [1, 2], convert: 'USD,EUR'}).then(console.log).catch(console.error)\n   * client.getQuotes({symbol: 'BTC,ETH'}).then(console.log).catch(console.error)\n   * client.getQuotes({symbol: ['BTC', 'ETH']}).then(console.log).catch(console.error)\n   */\n  getQuotes (args = {}) {\n    let convert = args.convert\n    const { id, symbol } = sanitizeIdAndSymbol(args.id, args.symbol)\n\n    if (convert instanceof Array) {\n      convert = convert.join(',')\n    }\n\n    return createRequest({\n      fetcher: this.fetcher,\n      url: `${this.url}/cryptocurrency/quotes/latest`,\n      config: this.config,\n      query: { id, symbol, convert }\n    })\n  }\n\n  /**\n   * Get global information\n   *\n   * @param {Object|String[]|String=} options Options for the request:\n   * @param {String[]|String=} [options.convert=\"USD\"] Return quotes in terms of another currency\n   *\n   * @example\n   * const client = new CoinMarketCap()\n   * client.getGlobal('GBP').then(console.log).catch(console.error)\n   * client.getGlobal({convert: 'GBP'}).then(console.log).catch(console.error)\n   */\n  getGlobal (convert) {\n    if (typeof convert === 'string') {\n      convert = { convert: convert.toUpperCase() }\n    }\n\n    if (convert instanceof Array) {\n      convert = { convert: convert.map(currency => currency.toUpperCase()) }\n    }\n\n    if (convert && convert.convert instanceof Array) {\n      convert.convert = convert.convert.join(',')\n    }\n\n    return createRequest({\n      fetcher: this.fetcher,\n      url: `${this.url}/global-metrics/quotes/latest`,\n      config: this.config,\n      query: convert\n    })\n  }\n}\n\nconst sanitizeIdAndSymbol = (id, symbol) => {\n  if (id && symbol) {\n    throw new Error('ID and symbol cannot be passed in at the same time.')\n  }\n\n  if (!id && !symbol) {\n    throw new Error('Either ID or symbol is required to be passed in.')\n  }\n\n  if (id instanceof Array) {\n    id = id.join(',')\n  }\n\n  if (symbol instanceof Array) {\n    symbol = symbol.join(',')\n  }\n\n  return { id, symbol }\n}\n\nconst createRequest = (args = {}) => {\n  const { url, config, query, fetcher } = args\n\n  return fetcher(`${url}${query ? `?${qs.stringify(query)}` : ''}`, config).then(res =>\n    res.json()\n  )\n}\n\nmodule.exports = CoinMarketCap\n"]},"metadata":{},"sourceType":"script"}