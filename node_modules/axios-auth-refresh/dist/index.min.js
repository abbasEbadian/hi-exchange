!function(e,r){"object"==typeof exports&&"object"==typeof module?module.exports=r(require("axios")):"function"==typeof define&&define.amd?define(["axios"],r):"object"==typeof exports?exports["axios-auth-refresh"]=r(require("axios")):e["axios-auth-refresh"]=r(e.axios)}(this,(function(e){return function(){"use strict";var r={593:function(e,r,t){var n=this&&this.__assign||function(){return n=Object.assign||function(e){for(var r,t=1,n=arguments.length;t<n;t++)for(var s in r=arguments[t])Object.prototype.hasOwnProperty.call(r,s)&&(e[s]=r[s]);return e},n.apply(this,arguments)};Object.defineProperty(r,"__esModule",{value:!0}),r.resendFailedRequest=r.getRetryInstance=r.unsetCache=r.createRequestQueueInterceptor=r.createRefreshCall=r.shouldInterceptError=r.mergeOptions=r.defaultOptions=void 0;var s=t(300);r.defaultOptions={statusCodes:[401],pauseInstanceWhileRefreshing:!1},r.mergeOptions=function(e,r){return n(n(n({},e),{pauseInstanceWhileRefreshing:r.skipWhileRefreshing}),r)},r.shouldInterceptError=function(e,r,t,n){var s,o;return!!e&&(!(null===(s=e.config)||void 0===s?void 0:s.skipAuthRefresh)&&(!!(r.interceptNetworkError&&!e.response&&0===e.request.status||e.response&&(null===(o=r.statusCodes)||void 0===o?void 0:o.includes(parseInt(e.response.status))))&&(e.response||(e.response={config:e.config}),!r.pauseInstanceWhileRefreshing||!n.skipInstances.includes(t))))},r.createRefreshCall=function(e,r,t){return  t.refreshCall || (t.refreshCall=r(e),"function"==typeof t.refreshCall.then)?t.refreshCall:(console.warn("axios-auth-refresh requires `refreshTokenCall` to return a promise."),Promise.reject())},r.createRequestQueueInterceptor=function(e,r,t){return void 0===r.requestQueueInterceptorId&&(r.requestQueueInterceptorId=e.interceptors.request.use((function(e){return(null==e?void 0:e.skipAuthRefresh)?e:r.refreshCall.catch((function(){throw new s.default.Cancel("Request call failed")})).then((function(){return t.onRetry?t.onRetry(e):e}))}))),r.requestQueueInterceptorId},r.unsetCache=function(e,r){e.interceptors.request.eject(r.requestQueueInterceptorId),r.requestQueueInterceptorId=void 0,r.refreshCall=void 0,r.skipInstances=r.skipInstances.filter((function(r){return r!==e}))},r.getRetryInstance=function(e,r){return r.retryInstance||e},r.resendFailedRequest=function(e,r){return e.config.skipAuthRefresh=!0,r(e.response.config)}},300:function(r){r.exports=e}},t={};function n(e){var s=t[e];if(void 0!==s)return s.exports;var o=t[e]={exports:{}};return r[e].call(o.exports,o,o.exports,n),o.exports}var s={};return function(){var e=s;Object.defineProperty(e,"__esModule",{value:!0});var r=n(593);e.default=function(e,t,n){if(void 0===n&&(n={}),"function"!=typeof t)throw new Error("axios-auth-refresh requires `refreshAuthCall` to be a function that returns a promise.");var s={skipInstances:[],refreshCall:void 0,requestQueueInterceptorId:void 0};return e.interceptors.response.use((function(e){return e}),(function(o){if(n=(0,r.mergeOptions)(r.defaultOptions,n),!(0,r.shouldInterceptError)(o,n,e,s))return Promise.reject(o);n.pauseInstanceWhileRefreshing&&s.skipInstances.push(e);var u=(0,r.createRefreshCall)(o,t,s);return(0,r.createRequestQueueInterceptor)(e,s,n),u.finally((function(){return(0,r.unsetCache)(e,s)})).catch((function(e){return Promise.reject(e)})).then((function(){return(0,r.resendFailedRequest)(o,(0,r.getRetryInstance)(e,n))}))}))}}(),s}()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,